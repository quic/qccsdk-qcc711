/*
 * Copyright (c) 2020-2021 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

/** @file qapi_task.h
   @brief Task scheduler interface definition.

   This module provides a round-robin task scheduler for driver and
   application use.

   Application interface:
      qapi_TSK_Create_Task() is used to create a new task and add it to the
      scheduler.  Once added, the task will immediately be marked pending and
      the provided task function will be called the next time the scheduler
      executes with the #QAPI_TSK_EVENT_INIT bit will be set in the EventMask.
      This provides a chance for any task initialization that needs to be
      performed.

      The task function may return a time in milliseconds for when it needs to
      be called again.  After this time has elapsed, the task function will be
      called with the #QAPI_TSK_EVENT_TIMEOUT bit set in the EventMask so the
      task can perform any necessary initialization.  The task function can
      return QAPI_TSK_NO_WAIT if it needs to be called again immediately and it
      can return QAPI_TSK_INFINITE_WAIT if the time isn't known.  In the latter
      case, the task function will only be called again after it is signaled or
      set to be deleted.

      Calling qapi_TSK_Signal_Task() will immediately mark the task as pending
      and its function will be called the next time the scheduler is run. The
      EventMask provided to this call will be or'ed with the current event mask
      for the task as provided to the task function when it is called.  This
      function can be called from an interrupt.

      Calling qapi_TSK_Delete_Task() will mark the task to be deleted.  The
      task function will be called the with the #QAPI_TSK_EVENT_DELETE flag
      set in the EventMask, providing a chance for the task to perform any
      necessary cleanup before being. After the task function returns, the
      task will be removed from the scheduler and deleted.

      Note that all calls to the task functions are called from the context of
      the scheduler and they must run to completion before another task can be
      executed.

      qapi_TSK_Get_Tick_Count() can be called to get the current system tick in
      milliseconds.

   Platform interface:
      qapi_TSK_Init() initializes the module and must be called before any
      function in this module.  This function takes an optional parameter for a
      callback function used to signal when the scheduler needs to execute.
      This is primarily intended for threaded platforms where there is a need to
      signal the thread the scheduler is running in but it may also be used on
      non-threaded platforms if needed.  Note that this function will be called
      from the context of other APIs in this module (qapi_TSK_Create_Task(),
      qapi_TSK_Signal_Task(), and qapi_TSK_Delete_Task()) which may be called
      from an interrupt.

      qapi_TSK_Process_Scheduler() is used to run the scheduler.  This function
      will return the time before the scheduler needs to be run again or
      #QAPI_TSK_INIFINITE_WAIT if this isn't known.  This can be used to set a
      system wake timer or similar.  In addition to when this timer expires,
      this function should also be called when the signal callback provided to
      qapi_TSK_Init() is called. If the signal callback isn't used, this
      function should be called when any event occurs on the system that may
      require a task be run, such as interrupt firing.
*/

#ifndef __QAPI_TASK_H__
#define __QAPI_TASK_H__

/*-------------------------------------------------------------------------
 * Include Files
 *-----------------------------------------------------------------------*/

#include "qapi_types.h"
#include "qapi_status.h"

/** @addtogroup qapi_platform_task_scheduler
@{ */

/*-------------------------------------------------------------------------
 * Preprocessor Definitions and Constants
 *-----------------------------------------------------------------------*/

/* General wait time definitions used by this module. */
#define QAPI_TSK_NO_WAIT           ((uint32_t)0)         /**< Indicates no wait time for applicable APIs. */
#define QAPI_TSK_INFINITE_WAIT     ((uint32_t)-1)        /**< Indicates an infinite wait time for applicable APIs. */

/* The following definitions are events that can be generated by the TSK
   module.  All values not defined here are user defined. */
#define QAPI_TSK_EVENT_TIMEOUT     ((uint32_t)(1 << 31)) /**< Task event indicating the time provided in the previous call to the task
                                                              function has elapsed. */
#define QAPI_TSK_EVENT_INIT        ((uint32_t)(1 << 30)) /**< Task event indicating the first call to the task function after the task
                                                              was created. */
#define QAPI_TSK_EVENT_DELETE      ((uint32_t)(1 << 29)) /**< Task event indicating the last call the task function before the task is
                                                              deleted. */


/*-------------------------------------------------------------------------
 * Type Declarations
 *-----------------------------------------------------------------------*/

/** Handle for a task. */
typedef struct qapi_TSK_Handle_s *qapi_TSK_Handle_t;

/**
   @brief Prototype for the function called to process a task.

   This function will be called:
    - after the task is created.
    - before the task is deleted.
    - after the period provided by the previous call to this function.
    - after the task has been signaled via qapi_TSK_Signal_Task().

   All calls to this function are made from the scheduler context and the
   function must return before other tasks can be run.

   @param[in] TaskHandle  Handle of the task.
   @param[in] EventMask   Mask of all events that triggered since the last call
                          to this function.  This may include bits set by a call
                          to qapi_TSK_Signal_Task() or events generated by this
                          module (see the QAPI_TSK_EVENT_* definitions).
   @param[in] UserParam   User-specified parameter for the task function.

   @return 
   Time in milliseconds before this function needs to be called again:\n
   QAPI_TSK_NO_WAIT -- The task is set to pending immediately. \n
   QAPI_TSK_INFINITE_WAIT -- The task will only become pending when it is
                             signaled, or set to be deleted.
*/
typedef uint32_t (*qapi_TSK_Function_t)(qapi_TSK_Handle_t TaskHandle, uint32_t EventMask, void *UserParam);

/**
   @brief Prototype for the function called to signal the scheduler needs to be
          processed.

   This function is primarily intended for threaded platforms where it can be
   used to signal the thread the scheduler is being run on but it can also be
   used on non-threaded platform if needed. The function will be called when
   an asynchronous event requires the scheduler to be run.

   @param[in] UserParam   User-specified parameter for the signal callback.
*/
typedef void (*qapi_TSK_Signal_CB_t)(void *UserParam);


/*-------------------------------------------------------------------------
 * Function Declarations
 *-----------------------------------------------------------------------*/

/**
   @brief Creates a task and adds it to the scheduler.

   Upon creation, the task will immediately be set as pending and its function
   will be called the next time the scheduler runs.

   @param[in] TaskFunction  Function called to process the task.
   @param[in] UserParam     User-specified parameter that will be provided to
                            the task function.

   @return
   Handle -- For the task. \n
   NULL -- If there was an error.
*/
qapi_TSK_Handle_t qapi_TSK_Create_Task(qapi_TSK_Function_t TaskFunction, void *UserParam);

/**
   @brief Deletes a task.

   When called, the specified task will be marked to be deleted.  Its function
   will be called the next time its scheduler runs and upon its return, the task
   will be removed from the scheduler and deleted.

   @param[in] TaskHandle  Handle of the task.
*/
void qapi_TSK_Delete_Task(qapi_TSK_Handle_t TaskHandle);

/**
   @brief Signals that a task needs to run.

   This function will set the task to pending and its function will be called
   the next time the scheduler is run.

   This function can be called from an interrupt context.

   @param[in] TaskHandle  Handle of the task.
   @param[in] EventMask   Mask of events that need to be signaled to the task.
                          The meaning of these bits is up to the user but at
                          least one but must be set.  Also note that the values
                          defined by the QAPI_TSK_EVENT_* are reserved and
                          cannot be set by this function.  This mask will be
                          or'ed with the current event mask for the task.

   @return
   QAPI_OK -- If the task was signaled successfully. \n
   Negative value -- If there is an error.
*/
qapi_Status_t qapi_TSK_Signal_Task(qapi_TSK_Handle_t TaskHandle, uint32_t EventMask);

/**
   @brief Get the current system tick count.

   @return
   Current millisecond tick count.
*/
uint32_t qapi_TSK_Get_Tick_Count(void);

/**
   @brief Enters a critical section.

   This function supports entering crytical sections recursively.  Interrupts
   will only be re-enabled when the number of calls to qapi_TSK_Exit_Critical()
   matches the number of times qapi_TSK_Enter_Critical() has been called.

   @return
   TRUE -- The first time the lock is taken. \n
   FALSE -- Not the first time the lock is taken.
*/
qbool_t qapi_TSK_Enter_Critical(void);

/**
   @brief Exits a critical section.

   Interrupts will only be re-enabled when the number of calls to
   qapi_TSK_Exit_Critical() matches the number of times qapi_TSK_Enter_Critical()
   has been called.

   @return
   TRUE -- If this is the last time the lock needs to be released (and the
           previous interrupt state was restored) \n
   FALSE -- If it is expected that the lock will
           be released again or was released too many times.
*/
qbool_t qapi_TSK_Exit_Critical(void);

/**
   @brief Initializes this module.

   This function must be called before any other function in this module.

   @param[in] Signal_CB  Function called to signal that the scheduler needs to
                         be run.  This parameter may be NULL if the signal
                         callback isn't required for the platform.
   @param[in] UserParam  User-specified parameter that will be provided to the
                         Signal_CB.  This is ignored if Signal_CB is NULL.
*/
void qapi_TSK_Init(qapi_TSK_Signal_CB_t Signal_CB, void *UserParam);

/**
   @brief Processes the scheduler and executes all pending tasks.

   @return
   The time in milliseconds until this function needs to be called again
   (this value can be used as a system wake timer):\n
   TSK_INFINITE_WAIT -- the function does not need to be called until
                        an asynchronous event occurs.
*/
uint32_t qapi_TSK_Process_Scheduler(void);

/**
   @brief Checks if any tasks have an event pending. This will not catch task
          timeouts.

   This is predominately used by the qapi_power module.

   @return
   TRUE -- A scheduler is idle. \n
   FALSE -- An event is pending.
*/
qbool_t qapi_TSK_Check_Idle(void);

/**
   @brief  Get the current context, task or interrupt.

   @return
   0 -- Task level. \n
   Non-0 -- Interrupt level.
*/
qbool_t qapi_TSK_Check_Interrupt_Context(void);

/** @} */  /* end_addtogroup qapi_platform_task_scheduler */

#endif

