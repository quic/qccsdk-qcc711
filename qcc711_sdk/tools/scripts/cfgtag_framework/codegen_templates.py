################################################################################
# C code generator file templates.
#
# Static definitions for various file fragment templates.
################################################################################
# Copyright (c) 2018-2022 Qualcomm Technologies International, Ltd.
# All Rights Reserved
# Confidential and Proprietary - Qualcomm Technologies International, Ltd.
################################################################################


################################################################################
# Library Imports
################################################################################


################################################################################
# Global Variables
################################################################################

class CodeGenTemplates():
    ############################################################################
    # Legal boilerplate for all generated source files
    ############################################################################
    legal = ''' *
 * Notes:
 *     This file is automatically generated by TagCfg.
 *     Please do NOT edit!!
 *
 * Copyright (c) {year} Qualcomm Technologies, Inc.{oneSpace}
 * Copyright (c) 2012-2016 Qualcomm Atheros, Inc.{oneSpace}
 * All Rights Reserved{oneSpace}
 * Confidential and Proprietary - Qualcomm Technologies, Inc.{oneSpace}
 * Notifications and licenses are retained for attribution purposes only{oneSpace}
 *
 * Copyright (c) 1999-2004 RF Micro Devices, Inc.  ALL RIGHTS RESERVED.
 *
 * Unpublished Confidential Information of RF Micro Devices, Inc.{twoSpace}
 * Do Not Disclose.
 *
 * No part of this work may be used or reproduced in any form or by any means,{oneSpace}
 * or stored in a database or retrieval system, without prior written{oneSpace}
 * permission of RF Micro Devices, Inc.
 *{oneSpace}
 * Use of this work is governed by a license granted by RF Micro Devices, Inc.{twoSpace}
 * This work is available by license only and is subject to all of the license restrictions.{threeSpace}
 * This work may not be used in any way not specifically permitted by such license.{oneSpace}
 * This work contains confidential and proprietary information of RF Micro{oneSpace}
 * Devices, Inc. which is protected by copyright, trade secret, trademark and{oneSpace}
 * other intellectual property rights.
 *
 * This copyright notice must be maintained in all derivative works
'''


    ############################################################################
    # cfg.h function prototypes
    ############################################################################
    configHFuncHdr = '''/*
 *************************************************************************
 *
 * CFG_Init - Initialize the configuration parameters.
 *
 *************************************************************************
 *
 * Purpose:
 *     This function initializes the system configuration parameters.
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_Init( void );

/*
 *************************************************************************
 *
 * CFG_GetConfigParameterInfo - Read the Parameter length and storage{oneSpace}
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     SiW_TRUE : If Configuration Parameter found (supported), else SiW_FALSE
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_GetConfigParameterInfo(CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry);

/*
 *************************************************************************
 *
 * CFG_HandleVariableConfigParameter - Handle Variable Config Parameters{oneSpace}
 *
 *************************************************************************
 *
 * Purpose:
 *     This function allocate the memory and get the value location of this Tag
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     SiW_TRUE : If Configuration Parameter found (supported), else SiW_FALSE
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_HandleVariableConfigParameter(CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry);

/*
 *************************************************************************
 *
 * CFG_GetTagEntry - Read the Parameter values
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the Tag value or updates the pointer to point to the value address
 *
 * Inputs:
 *     NVM_TagType Tag
 *     NVM_TagLengthType Length
 *
 * Outputs:
 *     SiW_TRUE : If Configuration Parameter found (supported), else SiW_FALSE
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_GetTagEntry( NVM_TagType Tag, NVM_TagLengthType Length );

#if (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE)
/*
 *************************************************************************
 *
 * CFG_WriteDynamicConfigParameters - Write the Dynamic Configuration Parameter Database{oneSpace}
 *
 *************************************************************************
 *
 * Purpose:
 *     This function updates the values of all modified Dynamic
 *     Configuration Parameters
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_WriteDynamicConfigParameters( void );

#endif /* (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE) */

typedef struct
{{
    void (*CFG_EXT_Init)( void );
    SiW_BOOLEAN (*CFG_EXT_GetConfigParameterInfo)( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry );
    void (*CFG_EXT_WriteDynamicConfigParameters)( void );
    STATUS_E (*CFG_EXT_NVM_GetTagEntry)( CFG_NVM_TAG_ENTRY_STRUCT_PTR nvmEntry, NVM_TagType Tag, NVM_TagLengthType Length );
}}CFG_EXT_ACCESS_FUNCTIONS;

extern void (*CFG_EXT_Init)( void );
extern SiW_BOOLEAN (*CFG_EXT_GetConfigParameterInfo)( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry );
extern void (*CFG_EXT_WriteDynamicConfigParameters)( void );
extern STATUS_E (*CFG_EXT_NVM_GetTagEntry)( CFG_NVM_TAG_ENTRY_STRUCT_PTR nvmEntry, NVM_TagType Tag, NVM_TagLengthType Length );

extern UINT8   CFG_NvmType;

void CFG_SetExtAccessFunctions(CFG_EXT_ACCESS_FUNCTIONS *pAccessFunctions);
'''

    configHRelocateFuncProto = '''
/*
 *************************************************************************
 *
 * CFG_Relocate - Called by application to relocate NVM tags.
 *
 *************************************************************************
 *
 * Purpose:
 *     This function relocates the NVM tag to a RAM section.
 *
 * Inputs:
 *     void *Address - pointer to the RAM section for relocated NVM tags
 *     UINT32 Length - the size of the RAM section for relocated NVM tags
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - relocate has been carried out successfully
 *                : SiW_FALSE - faliled to relocate.
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_Relocate( void *Address, UINT32 Length );
'''

    ############################################################################
    # cfg.c function pointer definitions
    ############################################################################
    configCFuncPtr = '''void (*CFG_EXT_Init)( void ) __attribute__((used)) = NULL;
SiW_BOOLEAN (*CFG_EXT_GetConfigParameterInfo)( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry ) __attribute__((used)) = NULL;
void (*CFG_EXT_WriteDynamicConfigParameters)( void ) __attribute__((used)) = NULL;
STATUS_E (*CFG_EXT_NVM_GetTagEntry)( CFG_NVM_TAG_ENTRY_STRUCT_PTR nvmEntry, NVM_TagType Tag, NVM_TagLengthType Length ) __attribute__((used)) = NULL ;

UINT8   CFG_NvmType = SYS_CFG_NVM_TYPE;
'''

    ############################################################################
    # cfg.c relocatable vars definitions
    ############################################################################
    configCRelocVars = '''
void *CFG_RelocateAddr = NULL;
UINT32 CFG_RelocateLength = 0;

'''


    ############################################################################
    # cfg.c function definitions
    ############################################################################
    configCFuncs='''/*
 *************************************************************************
 *
 * CFG_SetExtAccessFunctions - Called by application using extended tags.
 *
 *************************************************************************
 *
 * Purpose:
 *     This function sets the callback structure for processing extended tag values.
 *
 * Inputs:
 *     CFG_EXT_ACCESS_FUNCTIONS *pAccessFunctions - pointer to structure containing access function pointers
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_SetExtAccessFunctions(CFG_EXT_ACCESS_FUNCTIONS *pAccessFunctions)
{
    CFG_EXT_Init = pAccessFunctions->CFG_EXT_Init;
    CFG_EXT_GetConfigParameterInfo = pAccessFunctions->CFG_EXT_GetConfigParameterInfo;
    CFG_EXT_WriteDynamicConfigParameters = pAccessFunctions->CFG_EXT_WriteDynamicConfigParameters;
    CFG_EXT_NVM_GetTagEntry = pAccessFunctions->CFG_EXT_NVM_GetTagEntry;
}

/*
 *************************************************************************
 *
 * CFG_SetNvmType - Called by application to set the NVM type.
 *
 *************************************************************************
 *
 * Purpose:
 *     This function sets the NVM type in which the config parameters are stored.
 *
 * Inputs:
 *     UINT8 Type - NVM Type (Flash, EE, RAM...)
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_SetNvmType(UINT8 Type)
{
    CFG_NvmType = Type;
}

/*
 *************************************************************************
 *
 * CFG_Init - Initialize the configuration parameters.
 *
 *************************************************************************
 *
 * Purpose:
 *     This function initializes the system configuration parameters.
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_Init( void )
{
    CFG_NVM_TAG_ENTRY_STRUCT nvmEntry;
    SiW_BOOLEAN ReturnValue = SiW_TRUE;

'''


    ############################################################################
    # cfg.c CFG_InitCallInitialize
    ############################################################################
    CFG_InitCallInitialize='''
#if( SYS_CFG_NVM_RELOCATE_SUPPORT == INCLUDE_FEATURE )
    InitializerxAcqParams();
#endif
'''


    ############################################################################
    # cfg.c CfgInit() body
    ############################################################################
    configCInitBody = '''
    if( NULL != CFG_EXT_Init )
    {{
        CFG_EXT_Init();
    }}

    PFAL_CFG_PreNVMRead();
    if(SUCCESS == PFAL_CFG_DatabaseInit())
    {{
        /* read the next tag number and check if that tag in NVM is an extendedTag */
        while ( SiW_FALSE != PFAL_CFG_NVM_GetNextTag(&nvmEntry))
        {{
            /* Initialize the tag Entry MaximumLength and the pointer to the Value */
            nvmEntry.Length = 0;
            nvmEntry.pValue = NULL;

            /* Update the tag Entry length and the pointer to the Value */
            CFG_GetConfigParameterInfo(&nvmEntry);
            if (SUCCESS != PFAL_CFG_NVM_GetTagEntry(&nvmEntry))
            {{
                /* NVM Tag length read > maximum allowed tag length */
                ReturnValue = SiW_FALSE;
            }}
        }}
    }}
    else
    {{
        ReturnValue = SiW_FALSE;
    }}

#if (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE)
    /* Now read the dynamic database for the config parameters */
    if(SUCCESS == PFAL_CFG_DynamicDatabaseInit())
    {{
        /* read the next tag number and check if that tag in NVM is an extendedTag */
        while ( SiW_FALSE != PFAL_CFG_NVM_GetNextTag(&nvmEntry))
        {{
            /* Initialize the tag Entry MaximumLength and the pointer to the Value */
            nvmEntry.Length = 0;
            nvmEntry.pValue = NULL;

            /* Update the tag Entry length and the pointer to the Value */
            CFG_GetConfigParameterInfo(&nvmEntry);
            if (SUCCESS != PFAL_CFG_NVM_GetTagEntry(&nvmEntry))
            {{
                /* NVM Tag length read > maximum allowed tag length */
                ReturnValue = SiW_FALSE;
            }}
        }}
    }}
    else
    {{
        ReturnValue = SiW_FALSE;
    }}
#endif /* (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE) */
{relocate}
    /* Put any configurations not dependent on NVM */
    PFAL_CFG_PostNVMRead();
    return (ReturnValue);
}}
'''

    ############################################################################
    # cfg.c CFG_Relocate
    ############################################################################
    configRelocateFunc='''/*
 *************************************************************************
 *
 * CFG_Relocate - Called by application to relocate NVM tags.
 *
 *************************************************************************
 *
 * Purpose:
 *     This function relocates the NVM tag to a RAM section.
 *
 * Inputs:
 *     void *Address - pointer to the RAM section for relocated NVM tags
 *     UINT32 Length - the size of the RAM section for relocated NVM tags
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - relocate has been carried out successfully
 *                : SiW_FALSE - faliled to relocate.
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_Relocate( void *Address, UINT32 Length )
{{
'''

    ############################################################################
    # cfg.c CFG_GetConfigParameterInfo() header.
    ############################################################################
    configGetConfigParaInfoHeader='''/*
 *************************************************************************
 *
 * CFG_GetConfigParameterInfo - Read the Parameter length and storage{oneSpace}
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     SiW_TRUE : If Configuration Parameter found (supported), else SiW_FALSE
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_GetConfigParameterInfo( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry )
{{
'''


    ############################################################################
    # cfg.c CFG_HandleVariableConfigParameter() etc.
    ############################################################################
    configChandleVarConfig='''    if( NULL != CFG_EXT_GetConfigParameterInfo )
    {{
        if( CFG_EXT_GetConfigParameterInfo(pNvmEntry) )
        {{
            return SiW_TRUE;
        }}
    }}
    return SiW_FALSE;
}}

/*
 *************************************************************************
 *
 * CFG_HandleVariableConfigParameter - Handle Variable Config Parameters{oneSpace}
 *
 *************************************************************************
 *
 * Purpose:
 *     This function allocate the memory and get the value location of this Tag
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     SiW_TRUE : If Configuration Parameter found (supported), else SiW_FALSE
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_HandleVariableConfigParameter( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry )
{{

'''


    ############################################################################
    # cfg.c CFG_GetTagEntry
    ############################################################################
    configCGetTagEntry = '''    return SiW_FALSE;
}

/*
 *************************************************************************
 *
 * CFG_GetTagEntry - Read the Parameter values
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the Tag value or updates the pointer to point to the value address
 *
 * Inputs:
 *     NVM_TagType Tag
 *     NVM_TagLengthType Length
 *
 * Outputs:
 *     SiW_TRUE : If Configuration Parameter found (supported), else SiW_FALSE
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_GetTagEntry( NVM_TagType Tag, NVM_TagLengthType Length )
{
'''


    ############################################################################
    # cfg.c CFG_WriteDynamicConfigParameters
    ############################################################################
    configCWriteDyn = '''    return SiW_FALSE;
}}

#if (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE)
/*
 *************************************************************************
 *
 * CFG_WriteDynamicConfigParameters - Write the Dynamic Configuration Parameter Database{oneSpace}
 *
 *************************************************************************
 *
 * Purpose:
 *     This function updates the values of all modified Dynamic
 *     Configuration Parameters
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_WriteDynamicConfigParameters( void )
{{
'''


    ############################################################################
    # cfg.c end of file
    ############################################################################
    configCEnd = '''    if( NULL != CFG_EXT_WriteDynamicConfigParameters )
    {
        CFG_EXT_WriteDynamicConfigParameters();
    }
}

#endif /* (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE) */
'''


    ############################################################################
    # cfg_{group}.h function prototypes
    ############################################################################
    groupHFunc='''/*
 *************************************************************************
 *
 * CFG_{groupName}_Init - Group Configuration  initialization
 *
 *************************************************************************
 *
 * Purpose:
 *     This function is called to initalize the {groupName} group configuation
 *     parameter with the default values
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
extern void CFG_{groupName}_Init( void );

/*
 *************************************************************************
 *
 * CFG_{groupName}_GetConfigParameterInfo - Read the Parameter length and storage for
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
extern SiW_BOOLEAN CFG_{groupName}_GetConfigParameterInfo( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry );

/*
 *************************************************************************
 *
 * CFG_{groupName}_HandleVariableConfigParameter - Handle the Dynamic Memory configuration
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function allocate the memory for variable parameter of the tag and
 *      gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *       SiW_BOOLEAN: SiW_TRUE - found the Tag entry
 *                  : SiW_FALSE - not found.
 *
 * Notes:
 *
 *************************************************************************
 */
extern SiW_BOOLEAN CFG_{groupName}_HandleVariableConfigParameter( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry );

/*
 *************************************************************************
 *
 * CFG_{groupName}_GetTagEntry - Handle the RAMLESS configuration{oneSpace}
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function reads to RAM or updates the location pointer for the configuration parameters that{oneSpace}
 *     belong to this group.
 *
 * Inputs:
 *     NVM_TagType Tag: The tag number that needs to be handled
 *     NVM_TagLengthType Length: The tag length
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - Handled correctly
 *                : SiW_FALSE - Tag does not belong to this group or an error occured.
 *
 * Notes:
 *      !!! The routine depends on the offset being set correctly, the NVM Type being set correctly
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_GetTagEntry( NVM_TagType Tag, NVM_TagLengthType Length );
#if (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE)
/*
 *************************************************************************
 *
 * CFG_{groupName}_WriteDynamicConfigParameters - Write the Dynamic Configuration Parameter Database
 *
 *************************************************************************
 *
 * Purpose:
 *     This function updates the values of all modified Dynamic
 *     Configuration Parameters that belong to this group
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
extern void CFG_{groupName}_WriteDynamicConfigParameters( void );

#endif /* (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE) */
'''

    ############################################################################
    # cfg_{group}.h function prototypes
    ############################################################################
    groupRelocateFunc='''/*
 *************************************************************************
 *
 * CFG_{groupName}_Relocate - Group Configuration  relocation
 *
 *************************************************************************
 *
 * Purpose:
 *     This function is called to relocate the {groupName} group configuation
 *     default values to a RAM section
 *
 * Inputs:
 *     void **Address
 *     UINT32 Length
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - relocate has been carried out successfully
 *                : SiW_FALSE - faliled to relocate.
 *
 * Notes:
 *
 *************************************************************************
 */
extern SiW_BOOLEAN CFG_{groupName}_Relocate( void **Address, UINT32 *Length );
'''

    ############################################################################
    # cfg_{group}.c CFG_Init()
    ############################################################################
    groupCInit='''/*
 *************************************************************************
 *
 * CFG_{groupName}_Init - Group Configuration  initialization
 *
 *************************************************************************
 *
 * Purpose:
 *     This function is called to initalize the {groupName} group configuation
 *     parameter with the default values
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_{groupName}_Init( void )
{{
'''


    ############################################################################
    # cfg_{group}.c CFG_Relocate()
    ############################################################################
    groupCRelocate='''}}

/*
 *************************************************************************
 *
 * CFG_{groupName}_Relocate - Group Configuration  relocation
 *
 *************************************************************************
 *
 * Purpose:
 *     This function is called to relocate the {groupName} default group 
 *     configuation parameter values
 *
 * Inputs:
 *     void **Address
 *     UINT32 *Length 
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - relocate has been carried out successfully
 *                : SiW_FALSE - faliled to relocate.
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_Relocate( void **Address, UINT32 *Length )
{{
'''


    ############################################################################
    # cfg_{group}.c CFG_GetConfigParameterInfo()
    ############################################################################
    groupCGetConfig='''}}

/*
 *************************************************************************
 *
 * CFG_{groupName}_GetConfigParameterInfo - Read the Parameter length and storage for
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_GetConfigParameterInfo( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry )
{{
'''


    ############################################################################
    # cfg_{group}.c CFG_GetConfigParameterInfo() - section for static RAM tags
    ############################################################################
    groupCGetConfigStaticRAM='''    SiW_BOOLEAN bConfigParameterFound=SiW_FALSE;
    SiW_BOOLEAN bExtendedTag=SiW_FALSE;

    if(NULL == pNvmEntry)
    {
        return SiW_FALSE;
    }
    switch(pNvmEntry->Tag)
    {'''


    ############################################################################
    # cfg_{group}.c CFG_GetConfigParameterInfo() - switch default()
    ############################################################################
    groupCGetConfigStaticRAMDefault='''        default:
        {
            break;
        }
    }
    if(SiW_TRUE == bConfigParameterFound)
    {
        pNvmEntry->ExtendedTag = bExtendedTag;
    }
    return(bConfigParameterFound);
'''


    ############################################################################
    # cfg_{group}.c CFG_HandleVariableConfigParameter()
    ############################################################################
    groupCHandleVarConfig='''/*
 *************************************************************************
 *
 * CFG_{groupName}_HandleVariableConfigParameter - Handle the Dynamic Memory configuration{oneSpace}
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function reads to RAM or updates the location pointer for the configuration parameters that{oneSpace}
 *     belong to this group.
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry:{oneSpace}
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - found the Tag entry
 *                : SiW_FALSE - not found.
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_HandleVariableConfigParameter( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry )
{{
'''


    ############################################################################
    # cfg_{group}.c CFG_HandleVariableConfigParameter() - switch() case
    ############################################################################
    groupCHandleVarConfigCase='''
        case {tagNum}:
        {{/* Tag : {tagNum} : {tagName} */
            if (NULL != {tagPtr})
            {{
                PF_OS_FreeMem_NVM( {tagPtr} );
            }}
            {tagPtr} = (UINT8*)PF_OS_AllocMem_NVM( pNvmEntry->Length );
            pNvmEntry->pValue = {tagPtr};
            bConfigParameterFound=SiW_TRUE;
            break;
        }}
'''

    ############################################################################
    # cfg_{group}.c CFG_HandleVariableConfigParameter() - switch() default
    ############################################################################
    groupCHandleVarConfigDefault='''        default:
        {
            break;
        }
    }
    return(bConfigParameterFound);
'''


    ############################################################################
    # cfg_{group}.c CFG_GetTagEntry() - dynamic tags (not currently used/supported)
    ############################################################################
    groupCDynamicTags='''/*
 *************************************************************************
 *
 * CFG_{groupName}_GetTagEntry - Handle the RAMLESS configuration{oneSpace}
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function reads to RAM or updates the location pointer for the configuration parameters that{oneSpace}
 *     belong to this group.
 *
 * Inputs:
 *     NVM_TagType Tag: The tag number that needs to be handled
 *     NVM_TagLengthType Length: The tag length
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - Handled correctly
 *                : SiW_FALSE - Tag does not belong to this group or an error occured.
 *
 * Notes:
 *      !!! The routine depends on the offset being set correctly, the NVM Type being set correctly
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_GetTagEntry( NVM_TagType Tag, NVM_TagLengthType Length )
{{
    return(SiW_FALSE);
}}

#if (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE)
/*
 *************************************************************************
 *
 * CFG_{groupName}_WriteDynamicConfigParameters - Write the Dynamic Configuration Parameter Database
 *
 *************************************************************************
 *
 * Purpose:
 *     This function updates the values of all modified Dynamic
 *     Configuration Parameters that belong to this group
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_{groupName}_WriteDynamicConfigParameters( void )
{{
/* No Dynamic configuration parameters in this group */
}}

#endif /* (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE) */
'''


    ############################################################################
    # HTML file boilerplate
    ############################################################################
    htmlLegal='''
<html>
<head>
<title>Qualcomm Bluetooth Controller Firmware Configuration Parameters</title>
<h2>Qualcomm Bluetooth Controller Firmware Configuration Parameters</h2>

<body>

<h3>Purpose:</h3>
<h5>This file contains the description of the supported configuration settings for the Qualcomm Bluetooth Controller Firmware.</h5>

<hr>

<h3>Copyright (c) {year} Qualcomm Technologies International, Inc.</h3>
<h5>All Rights Reserved</h5>
<h5>Last Updated : {timestamp} </h5>

<hr>
<TABLE border=\"1\">
<CAPTION> <A NAME=\"TR\"><b> Configuration Parameter Reference </b></CAPTION>
<TR>
<TH> No. </TH>
<TH> Name </TH>
<TH> Size </TH>
</TR>
'''


    ############################################################################
    # cfg_{group}_patch.h function prototypes
    ############################################################################
    groupHPatchFunc='''/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchInit - Group Configuration  initialization
 *
 *************************************************************************
 *
 * Purpose:
 *     This function is called to initalize the {groupName} group configuation
 *     parameter with the default values
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
extern void CFG_{groupName}_PatchInit( void );

/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchGetConfigParameterInfo - Read the Parameter length and
 *     storage for parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
extern SiW_BOOLEAN CFG_{groupName}_PatchGetConfigParameterInfo( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry );

/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchHandleVariableConfigParameter - Handle the Dynamic Memory
 *     configuration parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function allocate the memory for variable parameter of the tag and
 *      gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *       SiW_BOOLEAN: SiW_TRUE - found the Tag entry
 *                  : SiW_FALSE - not found.
 *
 * Notes:
 *
 *************************************************************************
 */
extern SiW_BOOLEAN CFG_{groupName}_PatchHandleVariableConfigParameter( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry );

/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchGetTagEntry - Handle the RAMLESS 
 *     configuration{oneSpace} parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function reads to RAM or updates the location pointer for the configuration parameters that{oneSpace}
 *     belong to this group.
 *
 * Inputs:
 *     NVM_TagType Tag: The tag number that needs to be handled
 *     NVM_TagLengthType Length: The tag length
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - Handled correctly
 *                : SiW_FALSE - Tag does not belong to this group or an error occured.
 *
 * Notes:
 *      !!! The routine depends on the offset being set correctly, the NVM Type being set correctly
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_PatchGetTagEntry( NVM_TagType Tag, NVM_TagLengthType Length );
#if (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE)
/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchWriteDynamicConfigParameters - Write the Dynamic Configuration Parameter Database
 *
 *************************************************************************
 *
 * Purpose:
 *     This function updates the values of all modified Dynamic
 *     Configuration Parameters that belong to this group
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
extern void CFG_{groupName}_PatchWriteDynamicConfigParameters( void );

#endif /* (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE) */
'''

    ############################################################################
    # cfg_{group}_patch.c CFG_PatchInit()
    ############################################################################
    groupCPatchInit='''/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchInit - Group Configuration  initialization
 *
 *************************************************************************
 *
 * Purpose:
 *     This function is called to initalize the {groupName} group configuation
 *     parameter with the default values
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_{groupName}_PatchInit( void )
{{
'''


    ############################################################################
    # cfg_{group}_patch.c CFG_PatchRelocate()
    ############################################################################
    groupCPatchRelocate='''}}

/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchRelocate - Group Configuration  relocation
 *
 *************************************************************************
 *
 * Purpose:
 *     This function is called to relocate the {groupName} default group 
 *     configuation parameter values
 *
 * Inputs:
 *     void **Address
 *     UINT32 *Length 
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - relocate has been carried out successfully
 *                : SiW_FALSE - faliled to relocate.
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_PatchRelocate( void **Address, UINT32 *Length )
{{
'''


    ############################################################################
    # cfg_{group}_patch.c CFG_PatchGetConfigParameterInfo()
    ############################################################################
    groupCPatchGetConfig='''}}

/* Save some RAM on the patch build if VTags are supported */
#if CFG_PATCH_BUILD_VTAG_SUPPORT == NOT_INCLUDE_FEATURE

/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchGetConfigParameterInfo - Read the Parameter length and 
 *     storage for parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function gets the length and value location of the Tag Entry
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_PatchGetConfigParameterInfo( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry )
{{
'''


    ############################################################################
    # cfg_{group}_patch.c CFG_PatchHandleVariableConfigParameter()
    ############################################################################
    groupCPatchHandleVarConfig='''/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchHandleVariableConfigParameter - Handle the Dynamic Memory 
 *     configuration{oneSpace}
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function reads to RAM or updates the location pointer for the configuration parameters that{oneSpace}
 *     belong to this group.
 *
 * Inputs:
 *     CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry:{oneSpace}
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - found the Tag entry
 *                : SiW_FALSE - not found.
 *
 * Notes:
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_PatchHandleVariableConfigParameter( CFG_NVM_TAG_ENTRY_STRUCT * pNvmEntry )
{{
'''


    ############################################################################
    # cfg_{group}_patch.c CFG_PatchGetTagEntry() - dynamic tags (not currently used/supported)
    ############################################################################
    groupCPatchDynamicTags='''/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchGetTagEntry - Handle the RAMLESS configuration{oneSpace}
 *     parameters that belong to the group
 *
 *************************************************************************
 *
 * Purpose:
 *     This function reads to RAM or updates the location pointer for the configuration parameters that{oneSpace}
 *     belong to this group.
 *
 * Inputs:
 *     NVM_TagType Tag: The tag number that needs to be handled
 *     NVM_TagLengthType Length: The tag length
 *
 * Outputs:
 *     SiW_BOOLEAN: SiW_TRUE - Handled correctly
 *                : SiW_FALSE - Tag does not belong to this group or an error occured.
 *
 * Notes:
 *      !!! The routine depends on the offset being set correctly, the NVM Type being set correctly
 *
 *************************************************************************
 */
SiW_BOOLEAN CFG_{groupName}_PatchGetTagEntry( NVM_TagType Tag, NVM_TagLengthType Length )
{{
    return(SiW_FALSE);
}}

#if (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE)
/*
 *************************************************************************
 *
 * CFG_{groupName}_PatchWriteDynamicConfigParameters - Write the Dynamic Configuration Parameter Database
 *
 *************************************************************************
 *
 * Purpose:
 *     This function updates the values of all modified Dynamic
 *     Configuration Parameters that belong to this group
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 *
 * Notes:
 *
 *************************************************************************
 */
void CFG_{groupName}_PatchWriteDynamicConfigParameters( void )
{{
/* No Dynamic configuration parameters in this group */
}}

#endif /* (SYS_CFG_NVM_DYNAMIC_UPDATE == INCLUDE_FEATURE) */
'''
